-- Create table

CREATE TABLE REP
    (REP_NUM CHAR(2) PRIMARY KEY,
    LAST_NAME CHAR(15) NOT NULL,
    FIRST_NAME CHAR(15) NOT NULL,
    STREET CHAR(15),
    CITY CHAR(15),
    STATE CHAR(2),
    ZIP CHAR(5),
    COMMISSION DECIMAL(7,2),
    RATE DECIMAL(3,2) );

--Create tables with two or more primary keys
CREATE TABLE ORDER_LINE
    (ORDER_NUM CHAR(5),
    PART_NUM CHAR(4),
    NUM_ORDERED DECIMAL(3,0),
    QUOTED_PRICE DECIMAL(6,2),
    PRIMARY KEY (ORDER_NUM, PART_NUM) );


-- Insert values
INSERT INTO ORDERS
VALUES
    ('21608','20-OCT-2010','148'),
    ('21610','20-OCT-2010','356'),
    ('21613','21-OCT-2010','408'),
    ('21614','21-OCT-2010','282'),
    ('21617','23-OCT-2010','608'),
    ('21619','23-OCT-2010','148'),
    ('21623','23-OCT-2010','608');


-- Update values
UPDATE REP
SET LAST_NAME = 'Perry'
WHERE REP_NUM = '85';


-- Update multiple columns
UPDATE table_name
SET "column1" = value1, "column2" = value2, "columnN" = valueN
WHERE condition;


-- Delete rows
DELETE FROM table_name
WHERE condition;

--------------------------------------------
-- Compound conditions
-- AND, OR, NOT, BETWEEN, IS NULL
-- AND
SELECT DESCRIPTION
FROM PART
WHERE WAREHOUSE = '3'
AND ON_HAND > 25;

-- NOT
SELECT DESCRIPTION
FROM PART
WHERE NOT (WAREHOUSE = '3');

-- BETWEEN
SELECT CUSTOMER_NUM, CUSTOMER_NAME, BALANCE
FROM CUSTOMER
WHERE BALANCE BETWEEN 2000 AND 5000;

-- IS NULL
SELECT CUSTOMER_NUM, CUSTOMER_NAME
FROM CUSTOMER
WHERE STREET IS NULL;
--------------------------------------------

-- LIKE operator
SELECT CUSTOMER_NUM, CUSTOMER_NAME, STREET
FROM CUSTOMER
WHERE STREET LIKE '%Central%';

-- IN operator
SELECT CUSTOMER_NUM, CUSTOMER_NAME, CREDIT_LIMIT
FROM CUSTOMER
WHERE CREDIT_LIMIT IN (5000, 10000, 15000);

-- Sorting
-- Ascending is default sort order
SELECT CUSTOMER_NUM, CUSTOMER_NAME, CREDIT_LIMIT
FROM CUSTOMER
ORDER BY CREDIT_LIMIT DESC, CUSTOMER_NAME;

-- DISTINCT operator
SELECT DISTINCT(CUSTOMER_NUM)
FROM ORDERS;

-- GROUP BY clause
SELECT CREDIT_LIMIT, COUNT(*)
FROM CUSTOMER
WHERE REP_NUM = '20'
GROUP BY CREDIT_LIMIT
HAVING COUNT(*) > 1
ORDER BY CREDIT_LIMIT;

-- EXISTS operator
SELECT ORDER_NUM, ORDER_DATE
FROM ORDERS
WHERE EXISTS
    (SELECT *
    FROM ORDER_LINE
    WHERE ORDERS.ORDER_NUM = ORDER_LINE.ORDER_NUM
    AND PART_NUM = 'DR93');


-- SELF JOIN
SELECT F.CUSTOMER_NUM, F.CUSTOMER_NAME, S.CUSTOMER_NUM,
    S.CUSTOMER_NAME, F.CITY
FROM CUSTOMER F, CUSTOMER S
WHERE F.CITY = S.CITY
AND F.CUSTOMER_NUM < S.CUSTOMER_NUM
ORDER BY F.CUSTOMER_NUM, S.CUSTOMER_NUM;
